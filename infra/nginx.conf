server {
  listen 80;
  server_name  .console.domain.com;
  access_log        /dev/null;
  location / {
    rewrite ^/(.*)$ https://console.domain.com/$1 permanent; #301
  }
}

server {
  listen  443 ssl http2;
  server_name  .console.domain.com;

  root   /usr/share/nginx/html;

  ssl_certificate      /etc/certs/console.domain.fullchain.cer;
  ssl_certificate_key  /etc/certs/console.domain.key;
  include conf.d/ssl.conf;

  access_log  /var/log/nginx/console.domain.access.log  main;
  error_log  /var/log/nginx/console.domain.error.log;

  # favicon.ico
  location = /favicon.ico {
    log_not_found off;
    access_log off;
  }

  # robots.txt
  location = /robots.txt {
    log_not_found off;
    access_log off;
  }

  # gzip
  gzip on;
  gzip_vary on;
  gzip_comp_level 6;
  gzip_buffers 16 8k;
  gzip_min_length 1000;
  gzip_proxied any;
  gzip_disable "msie6";
  gzip_http_version 1.0;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml image/jpeg image/gif image/png;

  # brotli
  # brotli on;
  # brotli_comp_level 6;
  # brotli_buffers 16 8k;
  # brotli_min_length 20;
  # brotli_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml image/jpeg image/gif image/png;

  location / {
    try_files $uri $uri/ /index.html;
    # rewrite ^/(.*)$ https://domain.com/$1 permanent;
  }

  # Connection header for WebSocket reverse proxy
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ""      close;
  }

  map $remote_addr $proxy_forwarded_elem {
    # IPv4 addresses can be sent as-is
    ~^[0-9.]+$ "for=$remote_addr";

    # IPv6 addresses need to be bracketed and quoted
    ~^[0-9A-Fa-f:.]+$ "for=\"[$remote_addr]\"";

    # Unix domain socket names cannot be represented in RFC 7239 syntax
    default "for=unknown";
  }

  map $http_forwarded $proxy_add_forwarded {
    # If the incoming Forwarded header is syntactically valid, append to it
    "~^(,[ \\t]*)*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*([ \\t]*,([ \\t]*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*)?)*$" "$http_forwarded, $proxy_forwarded_elem";
    # Otherwise, replace it
    default "$proxy_forwarded_elem";
  }

  location ^~ /api {
    proxy_pass http://127.0.0.1:5610/;
    # Proxy Settings
    proxy_redirect off;
    proxy_http_version 1.1;
    proxy_cache_bypass $http_upgrade;

    # Proxy headers
    proxy_hide_header X-Powered-By;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Forwarded $proxy_add_forwarded;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Protocol $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_set_header X-Url-Scheme	 $scheme;

    # Proxy timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
  }
}

# acme.sh --issue --dns dns_cf --keylength ec-256 -d console.domain.com
# acme.sh --issue --keylength ec-256 -d console.domain.com -w /var/www/html
# acme.sh --installcert -d console.domain.com --key-file /etc/certs/console.domain.com.key --fullchain-file /etc/certs/console.domain.com.fullchain.cer --ecc --reloadcmd "sudo service nginx force-reload"
